// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go/src/github.com/dahefanteng/sstore/mon/mon.proto

/*
	Package mon is a generated protocol buffer package.

	It is generated from these files:
		go/src/github.com/dahefanteng/sstore/mon/mon.proto

	It has these top-level messages:
		SetMapRequest
		SetMapResponse
*/
package mon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SetMapRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetMapRequest) Reset()                    { *m = SetMapRequest{} }
func (m *SetMapRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMapRequest) ProtoMessage()               {}
func (*SetMapRequest) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{0} }

func (m *SetMapRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetMapRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetMapResponse struct {
	Rtcode int32 `protobuf:"varint,1,opt,name=rtcode,proto3" json:"rtcode,omitempty"`
}

func (m *SetMapResponse) Reset()                    { *m = SetMapResponse{} }
func (m *SetMapResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMapResponse) ProtoMessage()               {}
func (*SetMapResponse) Descriptor() ([]byte, []int) { return fileDescriptorMon, []int{1} }

func (m *SetMapResponse) GetRtcode() int32 {
	if m != nil {
		return m.Rtcode
	}
	return 0
}

func init() {
	proto.RegisterType((*SetMapRequest)(nil), "mon.SetMapRequest")
	proto.RegisterType((*SetMapResponse)(nil), "mon.SetMapResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mon service

type MonClient interface {
	SetMap(ctx context.Context, in *SetMapRequest, opts ...grpc.CallOption) (*SetMapResponse, error)
}

type monClient struct {
	cc *grpc.ClientConn
}

func NewMonClient(cc *grpc.ClientConn) MonClient {
	return &monClient{cc}
}

func (c *monClient) SetMap(ctx context.Context, in *SetMapRequest, opts ...grpc.CallOption) (*SetMapResponse, error) {
	out := new(SetMapResponse)
	err := grpc.Invoke(ctx, "/mon.Mon/SetMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mon service

type MonServer interface {
	SetMap(context.Context, *SetMapRequest) (*SetMapResponse, error)
}

func RegisterMonServer(s *grpc.Server, srv MonServer) {
	s.RegisterService(&_Mon_serviceDesc, srv)
}

func _Mon_SetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonServer).SetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mon.Mon/SetMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonServer).SetMap(ctx, req.(*SetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mon.Mon",
	HandlerType: (*MonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMap",
			Handler:    _Mon_SetMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/src/github.com/dahefanteng/sstore/mon/mon.proto",
}

func (m *SetMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMapRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMon(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *SetMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMapResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMon(dAtA, i, uint64(m.Rtcode))
	}
	return i, nil
}

func encodeVarintMon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SetMapRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMon(uint64(l))
	}
	return n
}

func (m *SetMapResponse) Size() (n int) {
	var l int
	_ = l
	if m.Rtcode != 0 {
		n += 1 + sovMon(uint64(m.Rtcode))
	}
	return n
}

func sovMon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMon(x uint64) (n int) {
	return sovMon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtcode", wireType)
			}
			m.Rtcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMon   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go/src/github.com/dahefanteng/sstore/mon/mon.proto", fileDescriptorMon)
}

var fileDescriptorMon = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4a, 0xcf, 0xd7, 0x2f,
	0x2e, 0x4a, 0xd6, 0x4f, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x49,
	0xcc, 0x48, 0x4d, 0x4b, 0xcc, 0x2b, 0x49, 0xcd, 0x4b, 0xd7, 0x2f, 0x2e, 0x2e, 0xc9, 0x2f, 0x4a,
	0xd5, 0xcf, 0xcd, 0xcf, 0x03, 0x61, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xe6, 0xdc, 0xfc,
	0x3c, 0x25, 0x73, 0x2e, 0xde, 0xe0, 0xd4, 0x12, 0xdf, 0xc4, 0x82, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4,
	0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x10, 0x53, 0x48, 0x84, 0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x09, 0x2c, 0x06, 0xe1,
	0x28, 0x69, 0x70, 0xf1, 0xc1, 0x34, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x71, 0xb1,
	0x15, 0x95, 0x24, 0xe7, 0xa7, 0xa4, 0x82, 0x35, 0xb3, 0x06, 0x41, 0x79, 0x46, 0x56, 0x5c, 0xcc,
	0xbe, 0xf9, 0x79, 0x42, 0xc6, 0x5c, 0x6c, 0x10, 0x0d, 0x42, 0x42, 0x7a, 0x20, 0x47, 0xa0, 0x58,
	0x2b, 0x25, 0x8c, 0x22, 0x06, 0x31, 0x51, 0x89, 0xc1, 0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x78,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x5f, 0x8c, 0xa7, 0xf2, 0x00, 0x00, 0x00,
}
